---
description: 
globs: 
alwaysApply: false
---
# MCP服务部署安全标准

## 🛡️ 安全要求

### 1. 代码安全检查
- **禁止危险函数调用**：不得使用 `eval()`, `exec()`, `Function()` 等危险函数
- **禁止文件系统破坏性操作**：不得使用 `rm -rf`, `del /s`, `format` 等危险命令
- **禁止网络攻击行为**：不得包含端口扫描、DDoS攻击等恶意代码
- **禁止权限提升**：不得尝试获取管理员权限或修改系统文件

### 2. 依赖安全要求
- **已知漏洞检查**：所有依赖包必须无已知严重安全漏洞
- **版本固定**：package.json中依赖版本必须明确指定，不使用 `^` 或 `~`
- **可信来源**：只能使用来自官方npm、PyPI等可信仓库的包

### 3. 配置安全要求
- **敏感信息保护**：不得在代码中硬编码API密钥、密码等敏感信息
- **环境变量规范**：敏感配置必须通过环境变量传递
- **权限最小化**：服务只能访问必要的文件和网络资源

### 4. 运行时安全要求
- **输入验证**：所有用户输入必须经过严格验证
- **输出过滤**：避免信息泄露，不输出敏感系统信息
- **错误处理**：适当的错误处理，避免暴露内部实现细节

## 🔍 检查清单

在部署MCP服务前，请确保：

- [ ] 代码经过安全审计，无恶意功能
- [ ] 依赖包版本明确，无已知漏洞
- [ ] 配置文件不包含敏感信息
- [ ] 输入输出经过适当验证和过滤
- [ ] 错误处理机制完善
- [ ] 网络访问权限最小化
- [ ] 文件系统访问权限最小化

## 🚫 禁止的操作

以下操作严格禁止在MCP服务中出现：

```javascript
// 禁止的JavaScript代码示例
eval(userInput);                    // 代码注入风险
new Function(userInput)();          // 动态代码执行
process.exit(0);                    // 强制退出进程
require('child_process').exec(cmd); // 未验证的系统命令执行
fs.unlinkSync('/system/file');      // 删除系统文件
```

```python
# 禁止的Python代码示例
exec(user_input)                    // 代码注入风险
eval(user_input)                    // 表达式注入
os.system(user_command)             // 未验证的系统命令
subprocess.call(shell_cmd, shell=True)  // Shell注入风险
```

## 📋 强制要求

### MCP服务必须包含的文件：
- `package.json` 或 `requirements.txt` - 明确的依赖定义
- `README.md` - 详细的功能说明和使用文档
- `LICENSE` - 开源许可证文件（建议MIT或Apache 2.0）

### 代码质量要求：
- 代码必须有适当的注释
- 函数和变量命名要清晰易懂
- 错误处理要完善
- 日志记录要适当（不记录敏感信息）

## 🛡️ 配置保护与备份要求

### 1. 强制备份机制
- **部署前备份**：每次部署MCP服务前必须自动创建当前配置的完整备份
- **备份验证**：备份文件必须经过完整性验证，确保可恢复性
- **备份管理**：系统自动管理备份文件的存储、命名和清理
- **无备份拒绝**：如果备份创建失败，必须拒绝部署操作以保护现有配置

### 2. 原有配置保护
- **配置冲突检测**：部署前必须检查是否存在同名MCP服务配置
- **覆盖保护**：默认情况下严格禁止覆盖现有配置，除非明确使用force参数
- **配置验证**：部署后必须验证配置文件的完整性和正确性
- **原子操作**：配置更新必须确保原子性，避免部分更新导致的不一致状态

### 3. 部署标准文件要求
- **项目级标准**：每个MCP服务项目必须在 `.cursor/rules/` 目录下包含 `mcp-部署标准.mdc` 文件
- **标准同步**：项目级部署标准必须与全局标准保持一致
- **自动复制**：如果项目缺少部署标准文件，系统将自动复制全局标准到项目中
- **强制检查**：部署过程中必须验证项目级部署标准文件的存在和有效性

### 4. 配置保护等级

#### 标准保护模式
- ✅ 强制备份每次部署
- ⚠️ 允许覆盖但需确认
- 📝 基础操作审计日志
- 🔧 最多保留10个备份文件

#### 严格保护模式
- ✅ 强制备份每次部署
- 🛡️ 默认禁止配置覆盖
- 📊 详细操作记录和审计
- 🔍 增强的配置验证检查
- 🔧 最多保留20个备份文件

#### 最大保护模式
- ✅ 强制备份每次部署
- 🚫 严格禁止配置覆盖
- ⏰ 每小时自动备份
- 🔐 关键操作需要确认
- 📈 完整的审计追踪日志
- 🔧 最多保留50个备份文件

## 🔧 部署检查流程

1. **部署标准检查**：验证项目是否包含部署标准文件，如无则自动复制
2. **配置备份创建**：强制创建当前配置的完整备份
3. **配置冲突检查**：检查是否存在同名服务器配置冲突
4. **静态代码扫描**：检查代码中的安全漏洞
5. **依赖安全检查**：验证所有依赖包的安全性
6. **配置文件检查**：确保无硬编码敏感信息
7. **权限验证**：确认服务运行的最小权限原则
8. **网络安全检查**：验证网络访问的合理性
9. **配置保护应用**：根据保护级别应用相应的保护策略
10. **部署后验证**：验证配置更新的完整性和正确性

## 🎯 合规性验证

部署前系统将自动执行：
- 部署标准文件完整性检查
- 配置备份创建和验证
- 配置冲突检测和保护
- 代码安全扫描
- 依赖漏洞检查
- 配置安全验证
- 权限审计
- 网络访问审查
- 配置保护策略应用

只有通过所有安全检查和配置保护验证的MCP服务才能被部署到生产环境。

## 🔄 配置恢复机制

### 紧急恢复流程
1. **备份列表查看**：系统提供完整的配置备份历史列表
2. **一键恢复**：支持选择任意备份点进行快速恢复
3. **恢复验证**：恢复后自动验证配置文件完整性
4. **服务重启**：提供恢复后的服务重启指导

### 配置保护工具
- `config_protection_manager` - 配置保护策略管理
- `deploy_mcp_server` - 带保护机制的安全部署
- `backup_config` - 手动配置备份创建
- `restore_config` - 配置恢复操作

## 📋 项目级标准要求

### 必需文件结构
```
your-mcp-project/
├── .cursor/
│   └── rules/
│       └── mcp-部署标准.mdc  ← 必需文件
├── src/
│   └── server.js|server.ts   ← MCP服务主文件
├── package.json              ← 依赖定义
├── README.md                 ← 项目文档
└── LICENSE                   ← 开源许可证
```

### 自动标准同步
- 系统在部署时自动检查项目是否包含部署标准文件
- 如果缺少，将自动从全局标准复制到项目的 `.cursor/rules/` 目录
- 确保每个MCP服务项目都有完整的部署标准约束

---

**重要提醒**：
1. 违反以上安全标准的MCP服务将被拒绝部署
2. 配置保护机制确保现有配置的安全性，防止意外覆盖
3. 强制备份机制保障配置可恢复性，避免数据丢失风险
4. 每个项目必须包含部署标准文件，确保部署过程的一致性和安全性

请严格遵守本标准！


